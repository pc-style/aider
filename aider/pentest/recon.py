"""
Reconnaissance manager for PentestAider.
Handles stub and safe/unsafe execution of recon tools.
"""
from aider.pentest.utils import command_exists
from aider.run_cmd import run_cmd

class ReconManager:
    def __init__(self, io, allow_exec=False):
        self.io = io
        self.allow_exec = allow_exec

    def _run_sublist3r(self, target):
        if not self.allow_exec:
            self.io.tool_output(f"(safe) Would run sublist3r on {target}")
            return
        if not command_exists("sublist3r"):
            self.io.tool_output("sublist3r not found in PATH.")
            return
        self.io.tool_output(f"Running sublist3r on {target} ...")
        try:
            output = run_cmd(["sublist3r", "-d", target], timeout=60)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
        except Exception as e:
            self.io.tool_output(f"Error running sublist3r: {e}")

    def _run_nmap(self, target):
        if not self.allow_exec:
            self.io.tool_output(f"(safe) Would run nmap on {target}")
            return
        if not command_exists("nmap"):
            self.io.tool_output("nmap not found in PATH.")
            return
        self.io.tool_output(f"Running nmap on {target} ...")
        try:
            output = run_cmd(["nmap", "-T4", "-F", target], timeout=60)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
        except Exception as e:
            self.io.tool_output(f"Error running nmap: {e}")

    def basic_recon(self, target):
        """
        Perform basic reconnaissance on a target using nmap, sublist3r, etc.
        """
        self._run_nmap(target)
        self._run_sublist3r(target)
        # Future: add other tools/stubs as needed