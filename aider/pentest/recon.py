"""
Reconnaissance manager for PentestAider.
Handles stub and safe/unsafe execution of recon tools.
"""
from aider.pentest.utils import command_exists
from aider.pentest.sandbox import SandboxManager
from aider.run_cmd import run_cmd
import os

class ReconManager:
    def __init__(self, io, allow_exec=False):
        self.io = io
        self.allow_exec = allow_exec
        self.results = []
        self._sandboxed = False
        if self.allow_exec and os.environ.get("PENTESTAIDER_UNSAFE", "0") != "1":
            io.tool_warning("Unsafe execution requested but PENTESTAIDER_UNSAFE != '1'. Running in safe (stub) mode.")
            self.allow_exec = False
            self._sandboxed = True

    def _run_sublist3r(self, target):
        tool = "sublist3r"
        if not self.allow_exec:
            msg = f"(safe) Would run sublist3r on {target}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "sublist3r not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        self.io.tool_output(f"Running sublist3r on {target} ...")
        try:
            output = SandboxManager.safe_run([tool, "-d", target], timeout=60)
            if output.startswith("(sandboxed)"):
                self.io.tool_output(output)
                self.results.append((tool, output))
                return ""
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running sublist3r: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def _run_nmap(self, target):
        tool = "nmap"
        if not self.allow_exec:
            msg = f"(safe) Would run nmap on {target}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "nmap not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        self.io.tool_output(f"Running nmap on {target} ...")
        try:
            output = SandboxManager.safe_run([tool, "-T4", "-F", target], timeout=60)
            if output.startswith("(sandboxed)"):
                self.io.tool_output(output)
                self.results.append((tool, output))
                return ""
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running nmap: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def _run_masscan(self, target):
        tool = "masscan"
        if not self.allow_exec:
            msg = f"(safe) Would run masscan on {target}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "masscan not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        self.io.tool_output(f"Running masscan on {target} ...")
        try:
            output = run_cmd([tool, "-p1-1024", "--rate", "1000", target], timeout=60)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running masscan: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def _run_amass(self, target):
        tool = "amass"
        if not self.allow_exec:
            msg = f"(safe) Would run amass on {target}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "amass not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        self.io.tool_output(f"Running amass enum on {target} ...")
        try:
            output = run_cmd([tool, "enum", "-d", target, "-o", "-"], timeout=60)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running amass: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def _run_dnsenum(self, target):
        tool = "dnsenum"
        if not self.allow_exec:
            msg = f"(safe) Would run dnsenum on {target}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "dnsenum not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        self.io.tool_output(f"Running dnsenum on {target} ...")
        try:
            output = run_cmd([tool, "--noreverse", target], timeout=60)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running dnsenum: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def basic_recon(self, target):
        """
        Perform basic reconnaissance on a target using nmap, sublist3r, and more.
        """
        self._run_nmap(target)
        self._run_sublist3r(target)
        self._run_masscan(target)
        self._run_amass(target)
        self._run_dnsenum(target)

    def get_results(self):
        return self.results