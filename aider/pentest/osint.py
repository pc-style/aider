"""
OSINTManager for PentestAider.
Provides safe/unsafe wrappers for whois, DNS lookup, and Shodan.
"""
import importlib

from aider.pentest.utils import command_exists
from aider.run_cmd import run_cmd

class OSINTManager:
    def __init__(self, io, allow_exec=False):
        self.io = io
        self.allow_exec = allow_exec

    def whois_lookup(self, target):
        if not self.allow_exec:
            self.io.tool_output(f"(safe) Would run whois on {target}")
            return
        if not command_exists("whois"):
            self.io.tool_output("whois command not found in PATH.")
            return
        self.io.tool_output(f"Running whois on {target} ...")
        try:
            output = run_cmd(["whois", target], timeout=30)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
        except Exception as e:
            self.io.tool_output(f"Error running whois: {e}")

    def dns_lookup(self, target):
        if not self.allow_exec:
            self.io.tool_output(f"(safe) Would run DNS lookup on {target}")
            return
        try:
            dns_resolver = importlib.util.find_spec("dns.resolver")
            if dns_resolver is not None:
                import dns.resolver
                self.io.tool_output(f"Resolving {target} (A/AAAA records)...")
                for rtype in ("A", "AAAA"):
                    try:
                        answers = dns.resolver.resolve(target, rtype)
                        ips = [str(ip) for ip in answers]
                        if ips:
                            self.io.tool_output(f"{rtype} records: {', '.join(ips)}")
                    except Exception:
                        self.io.tool_output(f"No {rtype} records found or error.")
            else:
                # fallback to system 'host' command if available
                if command_exists("host"):
                    output = run_cmd(["host", target], timeout=10)
                    lines = output.splitlines()[:10]
                    for line in lines:
                        self.io.tool_output(line)
                else:
                    self.io.tool_output("dnspython and 'host' not available for DNS lookup.")
        except Exception as e:
            self.io.tool_output(f"Error running DNS lookup: {e}")

    def shodan_search(self, target):
        if not self.allow_exec:
            self.io.tool_output(f"(safe) Would run Shodan search on {target}")
            return
        try:
            shodan_spec = importlib.util.find_spec("shodan")
            import os
            api_key = os.environ.get("SHODAN_API_KEY")
            if shodan_spec is None or not api_key:
                self.io.tool_output("Shodan library or API key not available. Skipping search.")
                return
            import shodan
            api = shodan.Shodan(api_key)
            self.io.tool_output(f"Searching Shodan for {target} ...")
            try:
                host = api.host(target)
                summary = {
                    "ip": host.get("ip_str", ""),
                    "org": host.get("org", ""),
                    "os": host.get("os", ""),
                    "ports": host.get("ports", []),
                }
                self.io.tool_output(f"Shodan: {summary}")
            except shodan.exception.APIError as e:
                self.io.tool_output(f"Shodan error: {e}")
        except Exception as e:
            self.io.tool_output(f"Error running Shodan search: {e}")

    def basic_osint(self, target):
        """Run basic OSINT on a target (whois, DNS, Shodan)."""
        self.whois_lookup(target)
        self.dns_lookup(target)
        self.shodan_search(target)