"""
VulnerabilityManager for PentestAider.
Handles vulnerability assessments (stub/safe mode).
"""

from aider.pentest.utils import command_exists
from aider.run_cmd import run_cmd

class VulnerabilityManager:
    def __init__(self, io, allow_exec=False):
        self.io = io
        self.allow_exec = allow_exec
        self.results = []

    def _run_nikto(self, target):
        tool = "nikto"
        if not self.allow_exec:
            msg = f"(safe) Would run nikto on {target}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "nikto not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        self.io.tool_output(f"Running nikto on {target} ...")
        try:
            output = run_cmd([tool, "-h", target], timeout=60)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running nikto: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def _run_sqlmap(self, target):
        tool = "sqlmap"
        if not self.allow_exec:
            msg = f"(safe) Would run sqlmap on {target}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "sqlmap not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        self.io.tool_output(f"Running sqlmap on {target} ...")
        try:
            output = run_cmd([tool, "-u", target, "--batch", "--crawl=1"], timeout=60)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running sqlmap: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def _run_nuclei(self, target):
        tool = "nuclei"
        if not self.allow_exec:
            msg = f"(safe) Would run nuclei on {target}"
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        if not command_exists(tool):
            msg = "nuclei not found in PATH."
            self.io.tool_output(msg)
            self.results.append((tool, msg))
            return ""
        self.io.tool_output(f"Running nuclei on {target} ...")
        try:
            output = run_cmd([tool, "-u", target], timeout=60)
            lines = output.splitlines()[:20]
            for line in lines:
                self.io.tool_output(line)
            snippet = "\n".join(lines)
            if len(output.splitlines()) > 20:
                self.io.tool_output("...(output truncated)...")
                snippet += "\n...(output truncated)..."
            self.results.append((tool, snippet))
            return output
        except Exception as e:
            err = f"Error running nuclei: {e}"
            self.io.tool_output(err)
            self.results.append((tool, err))
            return ""

    def basic_scan(self, target):
        self._run_nikto(target)
        self._run_sqlmap(target)
        self._run_nuclei(target)

    def get_results(self):
        return self.results