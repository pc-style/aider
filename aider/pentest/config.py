"""
Core pentesting agent configuration supporting multiple LLM providers
with MCP-compliant configuration.
"""

import json
import os
from dataclasses import dataclass, field
from typing import Dict, List, Optional, Any
from pathlib import Path


@dataclass
class LLMProviderConfig:
    """Configuration for a specific LLM provider."""
    name: str
    api_key: Optional[str] = None
    base_url: Optional[str] = None
    model: Optional[str] = None
    parameters: Dict[str, Any] = field(default_factory=dict)
    enabled: bool = True


@dataclass
class SecurityConfig:
    """Security and compliance configuration."""
    enforce_zero_trust: bool = True
    require_consent: bool = True
    audit_log_enabled: bool = True
    audit_log_path: str = "./audit.log"
    allowed_targets: List[str] = field(default_factory=list)
    blocked_targets: List[str] = field(default_factory=list)
    compliance_frameworks: List[str] = field(default_factory=lambda: ["SOC2", "ISO27001"])


@dataclass
class ToolConfig:
    """Tool orchestration configuration."""
    auto_install: bool = True
    sandbox_mode: bool = True
    tool_timeout: int = 300  # seconds
    max_parallel_tools: int = 10
    custom_tools_path: str = "./custom_tools"


@dataclass
class AgentConfig:
    """Multi-agent workflow configuration."""
    enable_multi_agent: bool = True
    max_agents: int = 5
    coordination_mode: str = "message_bus"  # or "reinforcement_learning"
    reward_learning: bool = False


@dataclass
class PentestConfig:
    """Main configuration for the pentesting agent."""
    
    # LLM Configuration
    llm_providers: List[LLMProviderConfig] = field(default_factory=lambda: [
        LLMProviderConfig(name="openai", model="gpt-4"),
        LLMProviderConfig(name="claude", model="claude-3-sonnet"),
        LLMProviderConfig(name="gemini", model="gemini-pro"),
        LLMProviderConfig(name="local", base_url="http://localhost:11434", model="llama2"),
    ])
    
    # Agent Configuration
    agent_config: AgentConfig = field(default_factory=AgentConfig)
    
    # Security Configuration
    security_config: SecurityConfig = field(default_factory=SecurityConfig)
    
    # Tool Configuration
    tool_config: ToolConfig = field(default_factory=ToolConfig)
    
    # Reporting Configuration
    report_formats: List[str] = field(default_factory=lambda: ["json", "html", "pdf", "markdown"])
    report_api_enabled: bool = True
    report_api_port: int = 8080
    
    # Resource Configuration
    detect_resources: bool = True
    cloud_burst_enabled: bool = False
    offline_mode: bool = False
    
    @classmethod
    def from_file(cls, config_path: str) -> "PentestConfig":
        """Load configuration from JSON file."""
        with open(config_path, 'r') as f:
            data = json.load(f)
        return cls.from_dict(data)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "PentestConfig":
        """Create configuration from dictionary."""
        # Convert nested dictionaries to dataclasses
        if 'llm_providers' in data:
            data['llm_providers'] = [
                LLMProviderConfig(**provider) 
                for provider in data['llm_providers']
            ]
        
        if 'agent_config' in data:
            data['agent_config'] = AgentConfig(**data['agent_config'])
        
        if 'security_config' in data:
            data['security_config'] = SecurityConfig(**data['security_config'])
        
        if 'tool_config' in data:
            data['tool_config'] = ToolConfig(**data['tool_config'])
        
        return cls(**data)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert configuration to dictionary."""
        result = {}
        for field_name, field_value in self.__dict__.items():
            if hasattr(field_value, '__dict__'):
                result[field_name] = field_value.__dict__
            elif isinstance(field_value, list) and field_value and hasattr(field_value[0], '__dict__'):
                result[field_name] = [item.__dict__ for item in field_value]
            else:
                result[field_name] = field_value
        return result
    
    def save_to_file(self, config_path: str):
        """Save configuration to JSON file."""
        with open(config_path, 'w') as f:
            json.dump(self.to_dict(), f, indent=2)
    
    def get_enabled_providers(self) -> List[LLMProviderConfig]:
        """Get list of enabled LLM providers."""
        return [provider for provider in self.llm_providers if provider.enabled]