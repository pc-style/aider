"""
SocialEngineeringManager for PentestAider.
Simulates social engineering scenarios, phishing, tips.
"""

import random
import textwrap

PHISHING_TEMPLATES = {
    "it-reset": (
        "Subject: Password Reset Required\n\n"
        "Dear {target_name},\n\n"
        "As part of a routine security review, {organisation}'s IT department requires all employees to reset their passwords. "
        "Please click the link below and follow the instructions to reset your password. If you do not complete this within 24 hours, your access may be suspended.\n"
        "http://it-support.{organisation.lower()}.com/reset\n\n"
        "Best regards,\n"
        "{sender_name}\nIT Support"
    ),
    "invoice": (
        "Subject: Urgent: Outstanding Invoice\n\n"
        "Dear {target_name},\n\n"
        "Please find attached the invoice for recent services to {organisation}. Kindly remit payment as soon as possible to avoid service interruption.\n"
        "If you have questions, reply directly to this email.\n\n"
        "Best regards,\n"
        "{sender_name}\nAccounting Department"
    ),
    "security-alert": (
        "Subject: Security Alert: Suspicious Login\n\n"
        "Dear {target_name},\n\n"
        "Our system detected a suspicious login attempt to your {organisation} account. Please review your recent activity and confirm your credentials using the link below.\n"
        "http://security.{organisation.lower()}.com/verify\n\n"
        "Sincerely,\n"
        "{sender_name}\nSecurity Team"
    ),
}

PRETEXT_SCENARIOS = [
    'You are acting as a {role} contacting {target_person} to obtain sensitive information about company projects.',
    'You are impersonating an HR specialist asking {target_person} to fill out a confidential survey.',
    'You pose as the building maintenance supervisor, calling {target_person} to schedule an emergency inspection.',
]

AWARENESS_TIPS = [
    "Always verify the sender's address before clicking links or downloading attachments.",
    "Never share your password or MFA codes, even with IT staff.",
    "Be cautious of urgent requests for sensitive information.",
    "Report suspicious emails to your security team.",
    "Hover over links to see their true destination before clicking.",
]

class SocialEngineeringManager:
    def __init__(self, io):
        self.io = io
        self.results = []

    def generate_phishing_email(self, template_type, target_name, organisation, sender_name="IT Support"):
        template = PHISHING_TEMPLATES.get(template_type)
        if not template:
            msg = f"(unsupported template: {template_type})"
            self.results.append(("email", msg))
            return msg
        email = template.format(
            target_name=target_name,
            organisation=organisation,
            sender_name=sender_name,
        )
        self.results.append(("email", textwrap.shorten(email, width=120, placeholder=" ...")))
        return email

    def pretexting_scenario(self, role, target_person):
        scenario = random.choice(PRETEXT_SCENARIOS)
        out = scenario.format(role=role, target_person=target_person)
        self.results.append(("pretext", out[:120]))
        return out

    def awareness_training_tip(self):
        tip = random.choice(AWARENESS_TIPS)
        self.results.append(("tip", tip))
        return tip

    def get_results(self):
        return self.results