#!/usr/bin/env python3
"""
Pentest AI Demo Script

Demonstrates the key features of the Aider-based Pentest AI system.
"""

import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime

from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Confirm

from .core.orchestrator import MultiAgentOrchestrator
from .core.mcp_client import MCPClient
from .core.container_manager import ContainerManager
from .core.graph_db import GraphDatabase
from .core.safety_gates import SafetyGates
from .core.audit_logger import AuditLogger

# Configure logging
logging.basicConfig(level=logging.INFO)
console = Console()


class PentestAIDemo:
    """Demo class for Pentest AI system"""
    
    def __init__(self):
        self.console = Console()
        self.components = {}
    
    async def run_demo(self):
        """Run the complete demo"""
        self.console.print(Panel(
            "[bold blue]Pentest AI Demo[/bold blue]\n"
            "AI-powered penetration testing platform\n"
            "Built on Aider's foundation",
            title="Welcome",
            border_style="blue"
        ))
        
        # Initialize components
        await self.initialize_components()
        
        # Run demo sections
        await self.demo_safety_gates()
        await self.demo_container_management()
        await self.demo_llm_integration()
        await self.demo_workflow_orchestration()
        await self.demo_graph_database()
        await self.demo_audit_logging()
        await self.demo_comprehensive_scan()
        
        # Show summary
        await self.show_demo_summary()
    
    async def initialize_components(self):
        """Initialize all system components"""
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            
            task = progress.add_task("Initializing components...", total=6)
            
            # Initialize MCP Client
            progress.update(task, description="Initializing MCP Client...")
            self.components['mcp'] = MCPClient()
            
            # Initialize Graph Database
            progress.update(task, description="Initializing Graph Database...")
            self.components['graph_db'] = GraphDatabase()
            
            # Initialize Safety Gates
            progress.update(task, description="Initializing Safety Gates...")
            self.components['safety_gates'] = SafetyGates()
            
            # Initialize Audit Logger
            progress.update(task, description="Initializing Audit Logger...")
            self.components['audit_logger'] = AuditLogger()
            
            # Initialize Container Manager
            progress.update(task, description="Initializing Container Manager...")
            self.components['container_manager'] = ContainerManager()
            
            # Initialize Orchestrator
            progress.update(task, description="Initializing Multi-Agent Orchestrator...")
            self.components['orchestrator'] = MultiAgentOrchestrator(
                mcp_client=self.components['mcp'],
                graph_db=self.components['graph_db'],
                safety_gates=self.components['safety_gates'],
                audit_logger=self.components['audit_logger']
            )
            
            progress.update(task, completed=6)
        
        self.console.print("[green]✓ All components initialized successfully![/green]")
    
    async def demo_safety_gates(self):
        """Demonstrate safety gates functionality"""
        self.console.print(Panel(
            "[bold]Safety Gates Demo[/bold]\n"
            "Zero-trust security and consent verification",
            title="Demo Section 1",
            border_style="red"
        ))
        
        safety_gates = self.components['safety_gates']
        
        # Test target validation
        test_targets = [
            "example.com",
            "localhost",
            "192.168.1.1",
            "invalid-target"
        ]
        
        table = Table(title="Target Validation Results")
        table.add_column("Target", style="cyan")
        table.add_column("Valid", style="green")
        table.add_column("Reason", style="yellow")
        
        for target in test_targets:
            check = await safety_gates.validate_target(target)
            table.add_row(
                target,
                "✓" if check.passed else "✗",
                check.message
            )
        
        self.console.print(table)
        
        # Test consent verification
        self.console.print("\n[bold]Consent Verification Test:[/bold]")
        consent_result = await safety_gates.verify_consent(
            target="example.com",
            scope=["web", "network"],
            user_id="demo_user"
        )
        
        self.console.print(f"Consent verified: {'✓' if consent_result else '✗'}")
        
        if Confirm.ask("Continue to next demo section?"):
            return True
        return False
    
    async def demo_container_management(self):
        """Demonstrate container management"""
        self.console.print(Panel(
            "[bold]Container Management Demo[/bold]\n"
            "Sandboxed tool execution and isolation",
            title="Demo Section 2",
            border_style="blue"
        ))
        
        container_manager = self.components['container_manager']
        
        # List available tools
        self.console.print("[bold]Available Tools:[/bold]")
        for tool, image in container_manager.tool_images.items():
            self.console.print(f"  • {tool}: {image}")
        
        # Test container status
        containers = await container_manager.list_containers()
        if containers:
            table = Table(title="Running Containers")
            table.add_column("ID", style="cyan")
            table.add_column("Name", style="green")
            table.add_column("Status", style="yellow")
            table.add_column("Image", style="blue")
            
            for container in containers[:5]:  # Show first 5
                table.add_row(
                    container['id'][:12],
                    container['name'],
                    container['status'],
                    container['image']
                )
            
            self.console.print(table)
        else:
            self.console.print("[yellow]No containers currently running[/yellow]")
        
        if Confirm.ask("Continue to next demo section?"):
            return True
        return False
    
    async def demo_llm_integration(self):
        """Demonstrate LLM integration"""
        self.console.print(Panel(
            "[bold]LLM Integration Demo[/bold]\n"
            "Multi-provider AI model communication",
            title="Demo Section 3",
            border_style="green"
        ))
        
        mcp_client = self.components['mcp']
        
        # Show available providers
        providers = await mcp_client.get_available_providers()
        self.console.print(f"[bold]Available LLM Providers:[/bold] {', '.join(providers)}")
        
        # Test connection
        if providers:
            test_result = await mcp_client.test_connection()
            self.console.print(f"Connection test: {'✓' if test_result else '✗'}")
            
            if test_result:
                # Send a test message
                response = await mcp_client.send_message(
                    "Hello! I'm testing the Pentest AI system. Can you help me understand what this system does?",
                    timeout=10
                )
                
                self.console.print(Panel(
                    response[:500] + "..." if len(response) > 500 else response,
                    title="AI Response",
                    border_style="green"
                ))
        
        if Confirm.ask("Continue to next demo section?"):
            return True
        return False
    
    async def demo_workflow_orchestration(self):
        """Demonstrate workflow orchestration"""
        self.console.print(Panel(
            "[bold]Workflow Orchestration Demo[/bold]\n"
            "Multi-agent coordination and RL feedback",
            title="Demo Section 4",
            border_style="magenta"
        ))
        
        orchestrator = self.components['orchestrator']
        
        # Show available agents
        self.console.print("[bold]Available AI Agents:[/bold]")
        for agent_id, config in orchestrator.agents.items():
            self.console.print(f"  • {agent_id}: {config.agent_type.value}")
        
        # Create a demo workflow
        self.console.print("\n[bold]Creating Demo Workflow...[/bold]")
        workflow_id = await orchestrator.create_workflow(
            target="demo.example.com",
            scope=["web", "network"],
            workflow_type="demo",
            parameters={"demo_mode": True}
        )
        
        self.console.print(f"Workflow created: {workflow_id}")
        
        # Show workflow status
        status = await orchestrator.get_workflow_status(workflow_id)
        if status:
            self.console.print(f"Status: {status.status.value}")
        
        if Confirm.ask("Continue to next demo section?"):
            return True
        return False
    
    async def demo_graph_database(self):
        """Demonstrate graph database functionality"""
        self.console.print(Panel(
            "[bold]Graph Database Demo[/bold]\n"
            "Target and relationship management",
            title="Demo Section 5",
            border_style="cyan"
        ))
        
        graph_db = self.components['graph_db']
        
        # Create demo target
        from .core.graph_db import Target
        from datetime import datetime
        
        demo_target = Target(
            id="demo-target-001",
            name="demo.example.com",
            type="domain",
            scope=["web", "network"],
            status="active",
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
            metadata={"demo": True}
        )
        
        success = await graph_db.create_target(demo_target)
        self.console.print(f"Target created: {'✓' if success else '✗'}")
        
        # Search targets
        targets = await graph_db.search_targets("demo")
        if targets:
            table = Table(title="Demo Targets")
            table.add_column("ID", style="cyan")
            table.add_column("Name", style="green")
            table.add_column("Type", style="yellow")
            table.add_column("Status", style="blue")
            
            for target in targets:
                table.add_row(
                    target.id,
                    target.name,
                    target.type,
                    target.status
                )
            
            self.console.print(table)
        
        if Confirm.ask("Continue to next demo section?"):
            return True
        return False
    
    async def demo_audit_logging(self):
        """Demonstrate audit logging"""
        self.console.print(Panel(
            "[bold]Audit Logging Demo[/bold]\n"
            "Immutable audit trail and compliance",
            title="Demo Section 6",
            border_style="yellow"
        ))
        
        audit_logger = self.components['audit_logger']
        
        # Log some demo events
        from .core.audit_logger import EventType, LogLevel
        
        events = [
            (EventType.SYSTEM_START, "Demo system started"),
            (EventType.TARGET_CREATE, "Demo target created"),
            (EventType.WORKFLOW_CREATE, "Demo workflow created"),
            (EventType.SAFETY_CHECK, "Demo safety check performed")
        ]
        
        for event_type, message in events:
            event_id = audit_logger.log_event(
                event_type=event_type,
                level=LogLevel.INFO,
                user_id="demo_user",
                message=message,
                details={"demo": True}
            )
            self.console.print(f"Logged event: {event_id}")
        
        # Get recent events
        recent_events = await audit_logger.get_events(limit=5)
        if recent_events:
            table = Table(title="Recent Audit Events")
            table.add_column("Time", style="cyan")
            table.add_column("Type", style="green")
            table.add_column("User", style="yellow")
            table.add_column("Message", style="blue")
            
            for event in recent_events:
                table.add_row(
                    event.timestamp.strftime("%H:%M:%S"),
                    event.event_type.value,
                    event.user_id,
                    event.message[:50] + "..." if len(event.message) > 50 else event.message
                )
            
            self.console.print(table)
        
        if Confirm.ask("Continue to next demo section?"):
            return True
        return False
    
    async def demo_comprehensive_scan(self):
        """Demonstrate comprehensive pentest scan"""
        self.console.print(Panel(
            "[bold]Comprehensive Scan Demo[/bold]\n"
            "End-to-end pentest workflow execution",
            title="Demo Section 7",
            border_style="red"
        ))
        
        # This would run a full scan in demo mode
        self.console.print("[yellow]Note: This is a demo - no actual scanning will be performed[/yellow]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            
            task = progress.add_task("Running demo scan...", total=4)
            
            # Simulate scan steps
            progress.update(task, description="Step 1: Reconnaissance...")
            await asyncio.sleep(2)
            
            progress.update(task, description="Step 2: Vulnerability scanning...")
            await asyncio.sleep(2)
            
            progress.update(task, description="Step 3: Analysis...")
            await asyncio.sleep(2)
            
            progress.update(task, description="Step 4: Report generation...")
            await asyncio.sleep(1)
            
            progress.update(task, completed=4)
        
        self.console.print("[green]✓ Demo scan completed successfully![/green]")
        
        # Show demo results
        table = Table(title="Demo Scan Results")
        table.add_column("Component", style="cyan")
        table.add_column("Status", style="green")
        table.add_column("Findings", style="yellow")
        
        table.add_row("Reconnaissance", "✓", "3 open ports discovered")
        table.add_row("Vulnerability Scan", "✓", "2 medium, 1 low severity")
        table.add_row("Analysis", "✓", "Risk score: 6.5/10")
        table.add_row("Reporting", "✓", "Report generated")
        
        self.console.print(table)
    
    async def show_demo_summary(self):
        """Show demo summary"""
        self.console.print(Panel(
            "[bold green]Demo Completed Successfully![/bold green]\n\n"
            "[bold]Key Features Demonstrated:[/bold]\n"
            "• Zero-trust safety gates and consent verification\n"
            "• Containerized tool execution with isolation\n"
            "• Multi-LLM integration via MCP\n"
            "• Multi-agent workflow orchestration\n"
            "• Graph database for target management\n"
            "• Immutable audit logging\n"
            "• Comprehensive pentest automation\n\n"
            "[bold]Next Steps:[/bold]\n"
            "• Install the system: pip install -e .\n"
            "• Initialize: pentest-ai init\n"
            "• Run scans: pentest-ai scan --target example.com\n"
            "• View docs: https://pentest-ai.readthedocs.io/",
            title="Demo Summary",
            border_style="green"
        ))


async def main():
    """Main demo function"""
    demo = PentestAIDemo()
    await demo.run_demo()


if __name__ == "__main__":
    asyncio.run(main())