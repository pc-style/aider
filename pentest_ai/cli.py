#!/usr/bin/env python3
"""
Pentest AI CLI

Command-line interface for the Aider-based Pentest AI system.
"""

import asyncio
import logging
import sys
import os
from typing import Optional, List
from pathlib import Path

import click
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel
from rich.text import Text

from .core.orchestrator import MultiAgentOrchestrator
from .core.mcp_client import MCPClient
from .core.container_manager import ContainerManager
from .core.graph_db import GraphDatabase
from .core.safety_gates import SafetyGates
from .core.audit_logger import AuditLogger


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

console = Console()


@click.group()
@click.option('--verbose', '-v', is_flag=True, help='Enable verbose logging')
@click.option('--config', '-c', type=click.Path(exists=True), help='Configuration file path')
@click.pass_context
def cli(ctx, verbose, config):
    """Pentest AI - AI-powered penetration testing platform"""
    if verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    ctx.ensure_object(dict)
    ctx.obj['verbose'] = verbose
    ctx.obj['config'] = config


@cli.command()
@click.option('--target', '-t', required=True, help='Target to scan')
@click.option('--scope', '-s', multiple=True, default=['web'], help='Scan scope')
@click.option('--tools', multiple=True, help='Specific tools to use')
@click.option('--output', '-o', type=click.Path(), help='Output file path')
@click.option('--format', 'output_format', default='html', type=click.Choice(['html', 'pdf', 'markdown', 'json']))
@click.pass_context
def scan(ctx, target, scope, tools, output, output_format):
    """Run a comprehensive pentest scan"""
    
    async def run_scan():
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Initializing Pentest AI...", total=None)
            
            try:
                # Initialize components
                mcp_client = MCPClient()
                graph_db = GraphDatabase()
                safety_gates = SafetyGates()
                audit_logger = AuditLogger()
                container_manager = ContainerManager()
                
                orchestrator = MultiAgentOrchestrator(
                    mcp_client=mcp_client,
                    graph_db=graph_db,
                    safety_gates=safety_gates,
                    audit_logger=audit_logger
                )
                
                progress.update(task, description="Performing safety checks...")
                
                # Safety checks
                safety_checks = await safety_gates.comprehensive_safety_check(
                    target=target,
                    scope=list(scope),
                    tools=list(tools) if tools else ['nmap', 'nikto', 'sqlmap'],
                    user_id="cli_user",
                    operation_type="scan"
                )
                
                failed_checks = [check for check in safety_checks if not check.passed]
                if failed_checks:
                    console.print(Panel(
                        f"[red]Safety checks failed![/red]\n" + 
                        "\n".join([f"â€¢ {check.message}" for check in failed_checks]),
                        title="Safety Violation",
                        border_style="red"
                    ))
                    return
                
                progress.update(task, description="Creating workflow...")
                
                # Create workflow
                workflow_id = await orchestrator.create_workflow(
                    target=target,
                    scope=list(scope),
                    workflow_type="comprehensive",
                    parameters={"tools": list(tools) if tools else None}
                )
                
                progress.update(task, description="Executing pentest workflow...")
                
                # Execute workflow
                result = await orchestrator.execute_workflow(workflow_id)
                
                if result.status.value == "completed":
                    console.print(Panel(
                        f"[green]Scan completed successfully![/green]\n"
                        f"Workflow ID: {workflow_id}\n"
                        f"Steps completed: {len(result.steps_completed)}\n"
                        f"Steps failed: {len(result.steps_failed)}",
                        title="Scan Results",
                        border_style="green"
                    ))
                    
                    # Generate report
                    if output:
                        progress.update(task, description="Generating report...")
                        await generate_report(result, output, output_format)
                        console.print(f"[green]Report saved to: {output}[/green]")
                    
                    # Display summary
                    display_scan_summary(result)
                    
                else:
                    console.print(Panel(
                        f"[red]Scan failed![/red]\n"
                        f"Status: {result.status.value}\n"
                        f"Steps completed: {len(result.steps_completed)}\n"
                        f"Steps failed: {len(result.steps_failed)}",
                        title="Scan Failed",
                        border_style="red"
                    ))
            
            except Exception as e:
                console.print(Panel(
                    f"[red]Error: {str(e)}[/red]",
                    title="Error",
                    border_style="red"
                ))
                if ctx.obj['verbose']:
                    console.print_exception()
    
    asyncio.run(run_scan())


@cli.command()
@click.option('--target', '-t', required=True, help='Target to scan')
@click.option('--scan-type', type=click.Choice(['basic', 'comprehensive', 'stealth']), default='basic')
@click.option('--ports', help='Port range to scan (e.g., 1-1000)')
@click.option('--output', '-o', type=click.Path(), help='Output file path')
@click.pass_context
def nmap(ctx, target, scan_type, ports, output):
    """Run nmap port scan"""
    
    async def run_nmap():
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Initializing nmap scan...", total=None)
            
            try:
                container_manager = ContainerManager()
                
                progress.update(task, description="Running nmap scan...")
                
                result = await container_manager.run_nmap_scan(
                    target=target,
                    scan_type=scan_type,
                    ports=ports,
                    output_file=output
                )
                
                if result.status.value == "stopped" and result.exit_code == 0:
                    console.print(Panel(
                        f"[green]Nmap scan completed![/green]\n"
                        f"Target: {target}\n"
                        f"Scan type: {scan_type}\n"
                        f"Output length: {len(result.stdout)} characters",
                        title="Nmap Results",
                        border_style="green"
                    ))
                    
                    if output:
                        console.print(f"[green]Results saved to: {output}[/green]")
                    
                    # Display scan results
                    display_nmap_results(result.stdout)
                    
                else:
                    console.print(Panel(
                        f"[red]Nmap scan failed![/red]\n"
                        f"Exit code: {result.exit_code}\n"
                        f"Error: {result.error or 'Unknown error'}",
                        title="Nmap Failed",
                        border_style="red"
                    ))
            
            except Exception as e:
                console.print(Panel(
                    f"[red]Error: {str(e)}[/red]",
                    title="Error",
                    border_style="red"
                ))
                if ctx.obj['verbose']:
                    console.print_exception()
    
    asyncio.run(run_nmap())


@cli.command()
@click.option('--target', '-t', required=True, help='Target URL')
@click.option('--level', default=1, type=int, help='Scan level (1-5)')
@click.option('--risk', default=1, type=int, help='Risk level (1-3)')
@click.option('--output', '-o', type=click.Path(), help='Output directory')
@click.pass_context
def sqlmap(ctx, target, level, risk, output):
    """Run sqlmap vulnerability scan"""
    
    async def run_sqlmap():
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Initializing sqlmap scan...", total=None)
            
            try:
                container_manager = ContainerManager()
                
                progress.update(task, description="Running sqlmap scan...")
                
                result = await container_manager.run_sqlmap_scan(
                    target=target,
                    level=level,
                    risk=risk,
                    output_file=output
                )
                
                if result.status.value == "stopped" and result.exit_code == 0:
                    console.print(Panel(
                        f"[green]SQLMap scan completed![/green]\n"
                        f"Target: {target}\n"
                        f"Level: {level}\n"
                        f"Risk: {risk}\n"
                        f"Output length: {len(result.stdout)} characters",
                        title="SQLMap Results",
                        border_style="green"
                    ))
                    
                    if output:
                        console.print(f"[green]Results saved to: {output}[/green]")
                    
                    # Display scan results
                    display_sqlmap_results(result.stdout)
                    
                else:
                    console.print(Panel(
                        f"[red]SQLMap scan failed![/red]\n"
                        f"Exit code: {result.exit_code}\n"
                        f"Error: {result.error or 'Unknown error'}",
                        title="SQLMap Failed",
                        border_style="red"
                    ))
            
            except Exception as e:
                console.print(Panel(
                    f"[red]Error: {str(e)}[/red]",
                    title="Error",
                    border_style="red"
                ))
                if ctx.obj['verbose']:
                    console.print_exception()
    
    asyncio.run(run_sqlmap())


@cli.command()
@click.option('--target', '-t', required=True, help='Target URL')
@click.option('--output', '-o', type=click.Path(), help='Output file path')
@click.pass_context
def nikto(ctx, target, output):
    """Run nikto web vulnerability scan"""
    
    async def run_nikto():
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Initializing nikto scan...", total=None)
            
            try:
                container_manager = ContainerManager()
                
                progress.update(task, description="Running nikto scan...")
                
                result = await container_manager.run_nikto_scan(
                    target=target,
                    output_file=output
                )
                
                if result.status.value == "stopped" and result.exit_code == 0:
                    console.print(Panel(
                        f"[green]Nikto scan completed![/green]\n"
                        f"Target: {target}\n"
                        f"Output length: {len(result.stdout)} characters",
                        title="Nikto Results",
                        border_style="green"
                    ))
                    
                    if output:
                        console.print(f"[green]Results saved to: {output}[/green]")
                    
                    # Display scan results
                    display_nikto_results(result.stdout)
                    
                else:
                    console.print(Panel(
                        f"[red]Nikto scan failed![/red]\n"
                        f"Exit code: {result.exit_code}\n"
                        f"Error: {result.error or 'Unknown error'}",
                        title="Nikto Failed",
                        border_style="red"
                    ))
            
            except Exception as e:
                console.print(Panel(
                    f"[red]Error: {str(e)}[/red]",
                    title="Error",
                    border_style="red"
                ))
                if ctx.obj['verbose']:
                    console.print_exception()
    
    asyncio.run(run_nikto())


@cli.command()
@click.option('--target', '-t', required=True, help='Target URL')
@click.option('--wordlist', '-w', help='Wordlist path')
@click.option('--scan-type', type=click.Choice(['dir', 'dns', 'fuzz']), default='dir')
@click.option('--output', '-o', type=click.Path(), help='Output file path')
@click.pass_context
def gobuster(ctx, target, wordlist, scan_type, output):
    """Run gobuster directory/file enumeration"""
    
    async def run_gobuster():
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Initializing gobuster scan...", total=None)
            
            try:
                container_manager = ContainerManager()
                
                progress.update(task, description="Running gobuster scan...")
                
                result = await container_manager.run_gobuster_scan(
                    target=target,
                    wordlist=wordlist,
                    scan_type=scan_type,
                    output_file=output
                )
                
                if result.status.value == "stopped" and result.exit_code == 0:
                    console.print(Panel(
                        f"[green]Gobuster scan completed![/green]\n"
                        f"Target: {target}\n"
                        f"Scan type: {scan_type}\n"
                        f"Output length: {len(result.stdout)} characters",
                        title="Gobuster Results",
                        border_style="green"
                    ))
                    
                    if output:
                        console.print(f"[green]Results saved to: {output}[/green]")
                    
                    # Display scan results
                    display_gobuster_results(result.stdout)
                    
                else:
                    console.print(Panel(
                        f"[red]Gobuster scan failed![/red]\n"
                        f"Exit code: {result.exit_code}\n"
                        f"Error: {result.error or 'Unknown error'}",
                        title="Gobuster Failed",
                        border_style="red"
                    ))
            
            except Exception as e:
                console.print(Panel(
                    f"[red]Error: {str(e)}[/red]",
                    title="Error",
                    border_style="red"
                ))
                if ctx.obj['verbose']:
                    console.print_exception()
    
    asyncio.run(run_gobuster())


@cli.command()
@click.option('--workflow-id', required=True, help='Workflow ID')
@click.option('--format', 'output_format', default='html', type=click.Choice(['html', 'pdf', 'markdown', 'json']))
@click.option('--output', '-o', type=click.Path(), help='Output file path')
@click.pass_context
def report(ctx, workflow_id, output_format, output):
    """Generate report for a workflow"""
    
    async def generate_workflow_report():
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Generating report...", total=None)
            
            try:
                # Initialize components
                graph_db = GraphDatabase()
                
                progress.update(task, description="Retrieving workflow data...")
                
                # Get workflow data
                workflow_data = await graph_db.get_workflow(workflow_id)
                if not workflow_data:
                    console.print(Panel(
                        f"[red]Workflow {workflow_id} not found![/red]",
                        title="Error",
                        border_style="red"
                    ))
                    return
                
                progress.update(task, description="Generating report...")
                
                # Generate report
                report_content = await generate_report_content(workflow_data, output_format)
                
                # Save report
                if output:
                    with open(output, 'w') as f:
                        f.write(report_content)
                    console.print(f"[green]Report saved to: {output}[/green]")
                else:
                    console.print(report_content)
            
            except Exception as e:
                console.print(Panel(
                    f"[red]Error: {str(e)}[/red]",
                    title="Error",
                    border_style="red"
                ))
                if ctx.obj['verbose']:
                    console.print_exception()
    
    asyncio.run(generate_workflow_report())


@cli.command()
@click.option('--target', '-t', help='Filter by target')
@click.option('--status', type=click.Choice(['active', 'completed', 'failed']), help='Filter by status')
@click.option('--limit', default=10, help='Number of results to show')
@click.pass_context
def list(ctx, target, status, limit):
    """List targets and workflows"""
    
    async def list_targets():
        try:
            graph_db = GraphDatabase()
            
            # Search targets
            filters = {}
            if target:
                filters['name'] = target
            if status:
                filters['status'] = status
            
            targets = await graph_db.search_targets("", filters)
            
            if targets:
                table = Table(title="Targets")
                table.add_column("ID", style="cyan")
                table.add_column("Name", style="green")
                table.add_column("Type", style="yellow")
                table.add_column("Status", style="blue")
                table.add_column("Created", style="magenta")
                
                for target in targets[:limit]:
                    table.add_row(
                        target.id[:8] + "...",
                        target.name,
                        target.type,
                        target.status,
                        target.created_at.strftime("%Y-%m-%d %H:%M")
                    )
                
                console.print(table)
            else:
                console.print("[yellow]No targets found[/yellow]")
        
        except Exception as e:
            console.print(Panel(
                f"[red]Error: {str(e)}[/red]",
                title="Error",
                border_style="red"
            ))
            if ctx.obj['verbose']:
                console.print_exception()
    
    asyncio.run(list_targets())


@cli.command()
@click.option('--days', default=30, help='Number of days to look back')
@click.pass_context
def stats(ctx, days):
    """Show system statistics"""
    
    async def show_stats():
        try:
            audit_logger = AuditLogger()
            
            # Get statistics
            from datetime import datetime, timedelta
            start_time = datetime.utcnow() - timedelta(days=days)
            
            stats = await audit_logger.get_statistics(start_time=start_time)
            
            if stats:
                console.print(Panel(
                    f"[bold]Statistics for last {days} days[/bold]\n\n"
                    f"Total events: {stats.get('total_events', 0)}\n"
                    f"Events by type: {stats.get('events_by_type', {})}\n"
                    f"Events by level: {stats.get('events_by_level', {})}\n"
                    f"Top users: {stats.get('top_users', {})}",
                    title="System Statistics",
                    border_style="blue"
                ))
            else:
                console.print("[yellow]No statistics available[/yellow]")
        
        except Exception as e:
            console.print(Panel(
                f"[red]Error: {str(e)}[/red]",
                title="Error",
                border_style="red"
            ))
            if ctx.obj['verbose']:
                console.print_exception()
    
    asyncio.run(show_stats())


@cli.command()
@click.pass_context
def init(ctx):
    """Initialize the Pentest AI system"""
    
    async def initialize_system():
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            task = progress.add_task("Initializing Pentest AI system...", total=None)
            
            try:
                progress.update(task, description="Initializing database...")
                graph_db = GraphDatabase()
                
                progress.update(task, description="Initializing audit logger...")
                audit_logger = AuditLogger()
                
                progress.update(task, description="Initializing safety gates...")
                safety_gates = SafetyGates()
                
                progress.update(task, description="Initializing container manager...")
                container_manager = ContainerManager()
                
                progress.update(task, description="Initializing MCP client...")
                mcp_client = MCPClient()
                
                console.print(Panel(
                    "[green]Pentest AI system initialized successfully![/green]\n\n"
                    "Components ready:\n"
                    "â€¢ Graph Database\n"
                    "â€¢ Audit Logger\n"
                    "â€¢ Safety Gates\n"
                    "â€¢ Container Manager\n"
                    "â€¢ MCP Client",
                    title="Initialization Complete",
                    border_style="green"
                ))
            
            except Exception as e:
                console.print(Panel(
                    f"[red]Initialization failed: {str(e)}[/red]",
                    title="Error",
                    border_style="red"
                ))
                if ctx.obj['verbose']:
                    console.print_exception()
    
    asyncio.run(initialize_system())


# Helper functions

async def generate_report(workflow_result, output_path, format):
    """Generate a report for workflow results"""
    # This would implement actual report generation
    # For now, just create a simple text report
    report_content = f"""
# Pentest Report

## Workflow Information
- ID: {workflow_result.workflow_id}
- Status: {workflow_result.status.value}
- Start Time: {workflow_result.start_time}
- End Time: {workflow_result.end_time}
- Steps Completed: {len(workflow_result.steps_completed)}
- Steps Failed: {len(workflow_result.steps_failed)}

## Results
{workflow_result.results}
"""
    
    with open(output_path, 'w') as f:
        f.write(report_content)


async def generate_report_content(workflow_data, format):
    """Generate report content"""
    # This would implement actual report generation
    return f"Report for workflow {workflow_data.get('id', 'unknown')}"


def display_scan_summary(result):
    """Display scan summary"""
    table = Table(title="Scan Summary")
    table.add_column("Metric", style="cyan")
    table.add_column("Value", style="green")
    
    table.add_row("Status", result.status.value)
    table.add_row("Steps Completed", str(len(result.steps_completed)))
    table.add_row("Steps Failed", str(len(result.steps_failed)))
    table.add_row("Duration", str(result.end_time - result.start_time) if result.end_time else "N/A")
    
    console.print(table)


def display_nmap_results(output):
    """Display nmap results"""
    console.print(Panel(
        output[:1000] + "..." if len(output) > 1000 else output,
        title="Nmap Output",
        border_style="blue"
    ))


def display_sqlmap_results(output):
    """Display sqlmap results"""
    console.print(Panel(
        output[:1000] + "..." if len(output) > 1000 else output,
        title="SQLMap Output",
        border_style="blue"
    ))


def display_nikto_results(output):
    """Display nikto results"""
    console.print(Panel(
        output[:1000] + "..." if len(output) > 1000 else output,
        title="Nikto Output",
        border_style="blue"
    ))


def display_gobuster_results(output):
    """Display gobuster results"""
    console.print(Panel(
        output[:1000] + "..." if len(output) > 1000 else output,
        title="Gobuster Output",
        border_style="blue"
    ))


if __name__ == '__main__':
    cli()