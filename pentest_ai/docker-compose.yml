version: '3.8'

services:
  # Neo4j Database
  neo4j:
    image: neo4j:5.15-community
    container_name: pentest-ai-neo4j
    environment:
      - NEO4J_AUTH=neo4j/pentest123
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - pentest-network
    restart: unless-stopped

  # Pentest AI Core
  pentest-ai:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pentest-ai-core
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pentest123
      - PENTEST_AI_LOG_LEVEL=INFO
      - PENTEST_AI_AUDIT_ENABLED=true
      - PENTEST_AI_SAFETY_MODE=strict
    ports:
      - "8000:8000"  # REST API
      - "8001:8001"  # Web UI
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - neo4j
    networks:
      - pentest-network
    restart: unless-stopped

  # REST API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: pentest-ai-api
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=pentest123
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - CORS_ORIGINS=*
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
    depends_on:
      - neo4j
    networks:
      - pentest-network
    restart: unless-stopped

  # Web UI
  web-ui:
    build:
      context: ./web-ui
      dockerfile: Dockerfile
    container_name: pentest-ai-web
    environment:
      - REACT_APP_API_URL=http://api:8000
      - REACT_APP_WS_URL=ws://api:8000
    ports:
      - "8001:3000"
    depends_on:
      - api
    networks:
      - pentest-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: pentest-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pentest-network
    restart: unless-stopped

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pentest-ai-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - pentest-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: pentest-ai-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - pentest-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pentest-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pentest-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pentest-ai-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - pentest-network
    restart: unless-stopped

  # Tool containers for pentesting
  nmap:
    image: nmap/nmap:latest
    container_name: pentest-ai-nmap
    volumes:
      - ./tools/nmap:/data
    networks:
      - pentest-network
    profiles:
      - tools

  sqlmap:
    image: sqlmap/sqlmap:latest
    container_name: pentest-ai-sqlmap
    volumes:
      - ./tools/sqlmap:/data
    networks:
      - pentest-network
    profiles:
      - tools

  nikto:
    image: hysnsec/nikto:latest
    container_name: pentest-ai-nikto
    volumes:
      - ./tools/nikto:/data
    networks:
      - pentest-network
    profiles:
      - tools

  gobuster:
    image: gobuster/gobuster:latest
    container_name: pentest-ai-gobuster
    volumes:
      - ./tools/gobuster:/data
    networks:
      - pentest-network
    profiles:
      - tools

  # Metasploit Framework
  metasploit:
    image: metasploitframework/metasploit-framework:latest
    container_name: pentest-ai-metasploit
    environment:
      - MSF_DATABASE_CONFIG=/usr/src/metasploit-framework/config/database.yml
    volumes:
      - ./tools/metasploit:/data
      - ./tools/metasploit/database.yml:/usr/src/metasploit-framework/config/database.yml
    networks:
      - pentest-network
    profiles:
      - tools

  # Burp Suite Community
  burp:
    image: portswigger/burp-rest-api:latest
    container_name: pentest-ai-burp
    environment:
      - BURP_API_KEY=your-api-key-here
    ports:
      - "1337:1337"
    volumes:
      - ./tools/burp:/data
    networks:
      - pentest-network
    profiles:
      - tools

  # Wireshark
  wireshark:
    image: linuxserver/wireshark:latest
    container_name: pentest-ai-wireshark
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    ports:
      - "3001:3000"
    volumes:
      - ./tools/wireshark:/config
    networks:
      - pentest-network
    profiles:
      - tools

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  pentest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16